pipeline {
    agent any

    environment {
        IMAGE_NAME = "infyshinetech/users"
        KUBECONFIG = "C:\\Users\\infyshine\\.kube\\config"
    }

    stages {
        stage('Get Commit Details') {
            steps {
                script {
                    GIT_COMMIT_MSG = bat(script: 'git log -1 --oneline', returnStdout: true).trim().split('\r\n')[2]
                    GIT_AUTHOR = bat(script: 'git log -1 --pretty=%cn', returnStdout: true).trim().split('\r\n')[2]
                    GIT_EMAIL = bat(script: 'git log -1 --pretty=%ae', returnStdout: true).trim().split('\r\n')[2]
                }
            }
        }

        stage('Image Backup') {
            parallel {
                stage('UAT Image Backup') {
                    steps {
                        script {
                            withDockerRegistry(credentialsId: 'docker') {
                                docker.image("${IMAGE_NAME}:uat").pull()
                                bat "docker tag ${IMAGE_NAME}:uat ${IMAGE_NAME}:uat-prev"
                                docker.image("${IMAGE_NAME}:uat-prev").push()
                                bat "docker rmi ${IMAGE_NAME}:uat ${IMAGE_NAME}:uat-prev"
                            }
                        }
                    }
                }
                stage('Prod Image Backup') {
                    steps {
                        script {
                            withDockerRegistry(credentialsId: 'docker') {
                                docker.image("${IMAGE_NAME}:prod").pull()
                                bat "docker tag ${IMAGE_NAME}:prod ${IMAGE_NAME}:prod-prev"
                                docker.image("${IMAGE_NAME}:prod-prev").push()
                                bat "docker rmi ${IMAGE_NAME}:prod ${IMAGE_NAME}:prod-prev"
                            }
                        }
                    }
                }
            }
        }

        stage('Pull From Docker Hub') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker') {
                        docker.image("${IMAGE_NAME}:qa").pull()
                    }
                }
            }
        }

        stage('Tag and Push to Docker Hub') {
            parallel {
                stage('Tag QA as UAT and Push') {
                    steps {
                        script {
                            withDockerRegistry(credentialsId: 'docker') {
                                bat "docker tag ${IMAGE_NAME}:qa ${IMAGE_NAME}:uat"
                                docker.image("${IMAGE_NAME}:uat").push()
                            }
                        }
                    }
                }
                stage('Tag QA as Prod and Push') {
                    steps {
                        script {
                            withDockerRegistry(credentialsId: 'docker') {
                                bat "docker tag ${IMAGE_NAME}:qa ${IMAGE_NAME}:prod"
                                docker.image("${IMAGE_NAME}:prod").push()
                            }
                        }
                    }
                }
            }
        }

        stage('Delete Images') {
            steps {
                script {
                    bat "docker rmi ${IMAGE_NAME}:qa ${IMAGE_NAME}:uat ${IMAGE_NAME}:prod"
                }
            }
        }

        stage('Deploy to UAT') {
            steps {
                script {
                    bat 'kubectl config use-context hrdome_uat'
                    bat 'kubectl rollout restart deployment/users-deployment -n uat'
                }
            }
        }

        stage('Deploy to Prod') {
            steps {
                script {
                    withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        bat 'kubectl config use-context hrdome_prod'
                        bat 'kubectl rollout restart deployment/users-deployment -n prod'
                    }
                }
            }
        }
    }

    post {
        success {
            mail to: 'gowrimanohar0@gmail.com',
            // mail to: 'testing@infyshine.com',
                 //cc: 'devops@infyshine.com, java@infyshine.com',
                 subject: "Build Success_${JOB_NAME}_${env.BUILD_NUMBER}",
                 body: """<!DOCTYPE html>
                         <html>
                         <style>
                         table, th, td { border:1px solid black; border-style: none; }
                         </style>
                         <body>
                         <table style="width:100%">
                             <tr><td>Build Status</td><td>: Success</td></tr>
                             <tr><td>Job</td><td>: ${JOB_NAME}</td></tr>
                             <tr><td>Build Number</td><td>: ${env.BUILD_NUMBER}</td></tr>
                             <tr><td>Build URL</td><td>: ${env.BUILD_URL}</td></tr>
                             <tr><td>Committed by</td><td>: ${GIT_EMAIL}</td></tr>
                             <tr><td>Last commit message</td><td>: ${GIT_COMMIT_MSG}</td></tr>
                         </table>
                         </body>
                         </html>""",
                 mimeType: 'text/html',
                 from: 'onboarding@infyshine.com'
        }
        failure {
            mail to: 'testing@infyshine.com',
                 cc: 'devops@infyshine.com',
                 subject: "Build Failed_${JOB_NAME}_${env.BUILD_NUMBER}",
                 body: """<!DOCTYPE html>
                         <html>
                         <style>
                         table, th, td { border:1px solid black; border-style: none; }
                         </style>
                         <body>
                         <table style="width:100%">
                             <tr><td>Build Status</td><td>: Failed</td></tr>
                             <tr><td>Job</td><td>: ${JOB_NAME}</td></tr>
                             <tr><td>Build Number</td><td>: ${env.BUILD_NUMBER}</td></tr>
                             <tr><td>Build URL</td><td>: ${env.BUILD_URL}</td></tr>
                             <tr><td>Committed by</td><td>: ${GIT_EMAIL}</td></tr>
                             <tr><td>Last commit message</td><td>: ${GIT_COMMIT_MSG}</td></tr>
                         </table>
                         </body>
                         </html>""",
                 mimeType: 'text/html',
                 from: 'onboarding@infyshine.com'
        }
    }
}
